parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"mUCE":[function(require,module,exports) {
window.LEVELS={},window.LEVELS[1]='\n#include <iostream>\nusing namespace std;\n<br>\nint main() {\n  cout << "Hello World!";\n  return 0;\n}',window.LEVELS[2]='\n#include <iostream>\nusing namespace std;\n<br>\nstruct Test {\n  int data;\n  Test() { cout << "Test::Test()" << endl; }\n  ~Test() { cout << "Test::~Test()" << endl; }\n};\n<br>\nint main() {\n  Test *ptr = (Test *)malloc(sizeof(Test));\n  new (ptr) Test;\n  ptr->~Test();\n  free(ptr);\n  return 0;\n}',window.LEVELS[3]="\n#include <map>\n<br>\ntemplate <int (*f)(int)>\nint memoize(int x) {\n  static std::map<int, int> cache;\n  std::map<int, int>::iterator y = cache.find(x);\n  if (y != cache.end()) return y->second;\n  return cache[x] = f(x);\n}\n<br>\nint fib(int n) {\n  if (n < 2) return n;\n  return memoize<fib>(n - 1) + memoize<fib>(n - 2);\n}",window.LEVELS[3]='\nstring someWordFunction(Node* head, int k) {\n  string ans = "";\n  int cnt = 0;\n  string word = "";\n<br>\n  while (head) {\n    if (cnt == k) {\n      if (ans != "") {\n          ans = ans + " ";\n      }\n<br>\n      ans = ans + word;\n      word = "";\n    }\n    word = word + string(1, head->data);\n    cnt++;\n    head = head->next;\n  }\n<br>\n  return ans;\n}',window.LEVELS[4]="\n#include <iostream>\nusing namespace std;\n<br>\nstruct Test {\n  int num;\n  void func() {}\n};\n<br>\nint Test::*ptr_num = &Test::num;\nvoid (Test::*ptr_func)() = &Test::func;\n<br>\nint main() {\n  Test t;\n  Test *pt = new Test;\n<br>\n  (t.*ptr_func)();\n  (pt->*ptr_func)();\n<br>\n  t.*ptr_num = 1;\n  pt->*ptr_num = 2;\n<br>\n  delete pt;\n  return 0;\n}",window.LEVELS[5]='\nstruct Event { virtual ~Event() {} };\nstruct MouseEvent : Event { int x, y; };\nstruct KeyboardEvent : Event { int key; };\n<br>\nvoid log(Event *event) {\n  if (MouseEvent *mouse = dynamic_cast<MouseEvent *>(event))\n    std::cout << "MouseEvent " << mouse->x << " " << mouse->y << std::endl;\n  else if (KeyboardEvent *keyboard = dynamic_cast<KeyboardEvent *>(event))\n    std::cout << "KeyboardEvent " << keyboard->key << std::endl;\n  else\n    std::cout << "Event" << std::endl;\n}';
},{}]},{},["mUCE"], null)
//# sourceMappingURL=/gmtk-gamejam-2020/levels.007d2553.js.map