{"version":3,"sources":["levels.js"],"names":["window","LEVELS","LEVEL_TIMES"],"mappings":";AAAAA,OAAOC,OAAS,GAChBD,OAAOE,YAAc,GAGrBF,OAAOC,OAAO,GAAd,6GAQAD,OAAOE,YAAY,GAAK,IAGxBF,OAAOC,OAAO,GAAd,qTAiBAD,OAAOE,YAAY,GAAK,KAExBF,OAAOC,OAAO,GAAd,iVAeAD,OAAOE,YAAY,GAAK,IAGxBF,OAAOC,OAAO,GAAd,uXAsBAD,OAAOE,YAAY,GAAK,IAGxBF,OAAOC,OAAO,GAAd,+WAyBAD,OAAOE,YAAY,GAAK,MAGxBF,OAAOC,OAAO,GAAd,4eAaAD,OAAOE,YAAY,GAAK","file":"levels.400c3fc9.js","sourceRoot":"../src","sourcesContent":["window.LEVELS = {};\nwindow.LEVEL_TIMES = {};\n\n// 98\nwindow.LEVELS[1] = `\n#include <iostream>\nusing namespace std;\n<br>\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}`;\nwindow.LEVEL_TIMES[1] = 60 * 1000;\n\n// 281\nwindow.LEVELS[2] = `\n#include <iostream>\nusing namespace std;\n<br>\nstruct Test {\n  int data;\n  Test() { cout << \"Test::Test()\" << endl; }\n  ~Test() { cout << \"Test::~Test()\" << endl; }\n};\n<br>\nint main() {\n  Test *ptr = (Test *)malloc(sizeof(Test));\n  new (ptr) Test;\n  ptr->~Test();\n  free(ptr);\n  return 0;\n}`\nwindow.LEVEL_TIMES[2] = 75 * 1000;\n\nwindow.LEVELS[3] = `\n#include <map>\n<br>\ntemplate <int (*f)(int)>\nint memoize(int x) {\n  static std::map<int, int> cache;\n  std::map<int, int>::iterator y = cache.find(x);\n  if (y != cache.end()) return y->second;\n  return cache[x] = f(x);\n}\n<br>\nint fib(int n) {\n  if (n < 2) return n;\n  return memoize<fib>(n - 1) + memoize<fib>(n - 2);\n}`\nwindow.LEVEL_TIMES[3] = 90 * 1000;\n\n// 369\nwindow.LEVELS[3] = `\nstring someWordFunction(Node* head, int k) {\n  string ans = \"\";\n  int cnt = 0;\n  string word = \"\";\n<br>\n  while (head) {\n    if (cnt == k) {\n      if (ans != \"\") {\n          ans = ans + \" \";\n      }\n<br>\n      ans = ans + word;\n      word = \"\";\n    }\n    word = word + string(1, head->data);\n    cnt++;\n    head = head->next;\n  }\n<br>\n  return ans;\n}`\nwindow.LEVEL_TIMES[3] = 100 * 1000;\n\n// 449\nwindow.LEVELS[4] = `\n#include <iostream>\nusing namespace std;\n<br>\nstruct Test {\n  int num;\n  void func() {}\n};\n<br>\nint Test::*ptr_num = &Test::num;\nvoid (Test::*ptr_func)() = &Test::func;\n<br>\nint main() {\n  Test t;\n  Test *pt = new Test;\n<br>\n  (t.*ptr_func)();\n  (pt->*ptr_func)();\n<br>\n  t.*ptr_num = 1;\n  pt->*ptr_num = 2;\n<br>\n  delete pt;\n  return 0;\n}`\nwindow.LEVEL_TIMES[4] = 125 * 1000;\n\n// 472\nwindow.LEVELS[5] = `\nstruct Event { virtual ~Event() {} };\nstruct MouseEvent : Event { int x, y; };\nstruct KeyboardEvent : Event { int key; };\n<br>\nvoid log(Event *event) {\n  if (MouseEvent *mouse = dynamic_cast<MouseEvent *>(event))\n    std::cout << \"MouseEvent \" << mouse->x << \" \" << mouse->y << std::endl;\n  else if (KeyboardEvent *keyboard = dynamic_cast<KeyboardEvent *>(event))\n    std::cout << \"KeyboardEvent \" << keyboard->key << std::endl;\n  else\n    std::cout << \"Event\" << std::endl;\n}`\nwindow.LEVEL_TIMES[5] = 150 * 1000;\n\n"]}